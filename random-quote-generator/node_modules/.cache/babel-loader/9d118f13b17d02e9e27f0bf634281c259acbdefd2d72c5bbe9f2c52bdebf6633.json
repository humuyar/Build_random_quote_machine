{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import COLORS_ARRAY from'./colorsArray';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faTwitter}from'@fortawesome/free-brands-svg-icons';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const quoteDBUrl=\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";function App(){const[quote,setQuote]=useState(\"I didn’t fail the test. I just found 100 ways to do it wrong.\");const[author,setAuthor]=useState(\"Benjamin Franklin\");const[randomNumber,setRandomNumber]=useState(0);const[quotesArray,setQuotesArray]=useState(null);const[accentColor,setAccentColor]=useState('#6d366b9e');const fetchQuotes=async url=>{const response=await fetch(url);const parsedJSON=await response.json();setQuotesArray(parsedJSON.quotes);console.log(parsedJSON);};useEffect(()=>{fetchQuotes(quoteDBUrl);},[quoteDBUrl]);const getRandomQuote=()=>{let randomInteger=Math.floor(quotesArray.length*Math.random());setRandomNumber(randomInteger);setAccentColor(COLORS_ARRAY[randomInteger]);setQuote(quotesArray[randomInteger].quote);setAuthor(quotesArray[randomInteger].author);};// const OURquotesArray = [{quote: \"Strive not to be a success, but rather to be of value.\", author: \"Albert Einstein\"},\n//   {quote:\"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n//   {quote:\"Nothing is impossible, the word itself says, “I’m possible!”\", author:\"Audrey Hepburn\"},\n//   {quote: \"Dreaming, after all, is a form of planning.\",author:\"Gloria Steinem\"}\n// ]\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(\"header\",{className:\"App-header\",style:{backgroundColor:accentColor},children:/*#__PURE__*/_jsxs(\"div\",{id:\"quote-box\",style:{color:accentColor},children:[/*#__PURE__*/_jsx(\"i\",{class:\"fa fa-quote-left\",children:\" \"}),/*#__PURE__*/_jsxs(\"p\",{id:\"text\",children:[\"\\\"\",quote,\"\\\"\\\"\"]}),/*#__PURE__*/_jsxs(\"p\",{id:\"author\",children:[\"- \",author]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button\",children:[/*#__PURE__*/_jsx(\"a\",{id:\"tweet-quote\",href:encodeURI('http://www.twitter.com/intent/tweet?text=${quote} -${author}'),style:{backgroundColor:accentColor},children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faTwitter})}),/*#__PURE__*/_jsx(\"button\",{id:\"new-quote\",onClick:()=>getRandomQuote(),style:{backgroundColor:accentColor},children:\"New Quotes\"})]})]})})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","COLORS_ARRAY","FontAwesomeIcon","faTwitter","jsx","_jsx","jsxs","_jsxs","quoteDBUrl","App","quote","setQuote","author","setAuthor","randomNumber","setRandomNumber","quotesArray","setQuotesArray","accentColor","setAccentColor","fetchQuotes","url","response","fetch","parsedJSON","json","quotes","console","log","getRandomQuote","randomInteger","Math","floor","length","random","className","children","style","backgroundColor","id","color","class","href","encodeURI","icon","onClick"],"sources":["C:/Users/Humi Yar/Desktop/react1/Build_random_quote_machine/random-quote-generator/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport COLORS_ARRAY from './colorsArray';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTwitter} from '@fortawesome/free-brands-svg-icons';\n\nconst quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n\nfunction App() {\n  const [quote, setQuote] = useState (\"I didn’t fail the test. I just found 100 ways to do it wrong.\")\n  const [author, setAuthor] = useState (\"Benjamin Franklin\")\n  const [randomNumber, setRandomNumber] = useState(0)\n  const [quotesArray, setQuotesArray] = useState(null)\n  const [accentColor, setAccentColor] = useState('#6d366b9e')\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url)\n    const parsedJSON = await response.json()\n    setQuotesArray(parsedJSON.quotes)\n    console.log(parsedJSON)\n  }\n\n  useEffect(() => {\n    fetchQuotes(quoteDBUrl)\n  }, [quoteDBUrl])\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger)\n    setAccentColor(COLORS_ARRAY[randomInteger])\n    setQuote(quotesArray[randomInteger].quote)\n    setAuthor(quotesArray[randomInteger].author)\n  }\n\n  // const OURquotesArray = [{quote: \"Strive not to be a success, but rather to be of value.\", author: \"Albert Einstein\"},\n  //   {quote:\"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n  //   {quote:\"Nothing is impossible, the word itself says, “I’m possible!”\", author:\"Audrey Hepburn\"},\n  //   {quote: \"Dreaming, after all, is a form of planning.\",author:\"Gloria Steinem\"}\n  // ]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor: accentColor}}>\n      <div id=\"quote-box\" style={{color: accentColor}}>\n        {/* <h1>Random Number: {randomNumber}</h1> */}\n        <i class=\"fa fa-quote-left\"> </i><p id=\"text\">\n          \"{quote}\"\"\n        </p>\n        <p id=\"author\">\n          - {author}\n        </p>\n        <div className=\"button\">\n        <a id=\"tweet-quote\" href={encodeURI('http://www.twitter.com/intent/tweet?text=${quote} -${author}')} style={{backgroundColor: accentColor}}><FontAwesomeIcon icon={faTwitter}/></a>\n        <button id=\"new-quote\" onClick={()=> getRandomQuote()} style={{backgroundColor: accentColor}}>New Quotes</button>\n        </div>\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Humi Yar\\\\Desktop\\\\react1\\\\Build_random_quote_machine\\\\random-quote-generator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\nfunction App() {\n  _s();\n  const [quote, setQuote] = useState(\"I didn’t fail the test. I just found 100 ways to do it wrong.\");\n  const [author, setAuthor] = useState(\"Benjamin Franklin\");\n  const [randomNumber, setRandomNumber] = useState(0);\n  const [quotesArray, setQuotesArray] = useState(null);\n  const fetchQuotes = async url => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArray(parsedJSON.quotes);\n    console.log(parsedJSON);\n  };\n  useEffect(() => {\n    fetchQuotes(quoteDBUrl);\n  }, [quoteDBUrl]);\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger);\n    setQuote(quotesArray[randomInteger].quote);\n    setAuthor(quotesArray[randomInteger].author);\n  };\n\n  // const OURquotesArray = [{quote: \"Strive not to be a success, but rather to be of value.\", author: \"Albert Einstein\"},\n  //   {quote:\"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n  //   {quote:\"Nothing is impossible, the word itself says, “I’m possible!”\", author:\"Audrey Hepburn\"},\n  //   {quote: \"Dreaming, after all, is a form of planning.\",author:\"Gloria Steinem\"}\n  // ]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quote-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Random Number: \", randomNumber]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\\"\", quote, \"\\\"\\\"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"- \", author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => getRandomQuote(),\n          children: \"New Quotes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8esEyvwxR7oaYthH9pQEIyUCz4U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","quoteDBUrl","App","_s","quote","setQuote","author","setAuthor","randomNumber","setRandomNumber","quotesArray","setQuotesArray","fetchQuotes","url","response","fetch","parsedJSON","json","quotes","console","log","getRandomQuote","randomInteger","Math","floor","length","random","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Humi Yar/Desktop/react1/Build_random_quote_machine/random-quote-generator/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n\nfunction App() {\n  const [quote, setQuote] = useState (\"I didn’t fail the test. I just found 100 ways to do it wrong.\")\n  const [author, setAuthor] = useState (\"Benjamin Franklin\")\n  const [randomNumber, setRandomNumber] = useState(0)\n  const [quotesArray, setQuotesArray] = useState(null)\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url)\n    const parsedJSON = await response.json()\n    setQuotesArray(parsedJSON.quotes)\n    console.log(parsedJSON)\n  }\n\n  useEffect(() => {\n    fetchQuotes(quoteDBUrl)\n  }, [quoteDBUrl])\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger)\n    setQuote(quotesArray[randomInteger].quote)\n    setAuthor(quotesArray[randomInteger].author)\n  }\n\n  // const OURquotesArray = [{quote: \"Strive not to be a success, but rather to be of value.\", author: \"Albert Einstein\"},\n  //   {quote:\"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n  //   {quote:\"Nothing is impossible, the word itself says, “I’m possible!”\", author:\"Audrey Hepburn\"},\n  //   {quote: \"Dreaming, after all, is a form of planning.\",author:\"Gloria Steinem\"}\n  // ]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div id =\"quote-box\">\n      <h1>Random Number: {randomNumber}</h1>\n       <p>\n        \"{quote}\"\"\n       </p>\n       <p>\n        - {author}\n       </p>\n       <button onClick={()=> getRandomQuote()}>New Quotes</button>\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,UAAU,GAAG,wIAAwI;AAG3J,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAE,+DAA+D,CAAC;EACpG,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAE,mBAAmB,CAAC;EAC1D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMe,WAAW,GAAG,MAAOC,GAAG,IAAK;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxCN,cAAc,CAACK,UAAU,CAACE,MAAM,CAAC;IACjCC,OAAO,CAACC,GAAG,CAACJ,UAAU,CAAC;EACzB,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACdc,WAAW,CAACX,UAAU,CAAC;EACzB,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMoB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACd,WAAW,CAACe,MAAM,GAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;IAClEjB,eAAe,CAACa,aAAa,CAAC;IAC9BjB,QAAQ,CAACK,WAAW,CAACY,aAAa,CAAC,CAAClB,KAAK,CAAC;IAC1CG,SAAS,CAACG,WAAW,CAACY,aAAa,CAAC,CAAChB,MAAM,CAAC;EAC9C,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA,oBACEN,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB5B,OAAA;MAAQ2B,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC9B5B,OAAA;QAAK6B,EAAE,EAAE,WAAW;QAAAD,QAAA,gBACpB5B,OAAA;UAAA4B,QAAA,GAAI,iBAAe,EAACpB,YAAY;QAAA;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACrCjC,OAAA;UAAA4B,QAAA,GAAG,IACD,EAACxB,KAAK,EAAC,MACT;QAAA;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACJjC,OAAA;UAAA4B,QAAA,GAAG,IACA,EAACtB,MAAM;QAAA;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,eACJjC,OAAA;UAAQkC,OAAO,EAAEA,CAAA,KAAKb,cAAc,CAAC,CAAE;UAAAO,QAAA,EAAC;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC9B,EAAA,CA7CQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Humi Yar\\\\Desktop\\\\react1\\\\Build_random_quote_machine\\\\random-quote-generator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //set state for the fetch API json response (array of quotes) & set state to get a randomized quote\n  const [quotes, setQuotes] = useState([]);\n  const [randomQuote, setRandomQuote] = useState([]);\n  //fetch data from API\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://type.fit/api/quotes');\n      const data = await response.json();\n      //use data to set a random quote into state\n      setQuotes(data);\n      let randomIndex = Math.floor(Math.random() * data.length);\n      setRandomQuote(data[randomIndex]);\n    }\n    //call fetch API function\n    fetchData();\n  }, []);\n\n  //get new random quote & set it into state\n  const getNewQuote = () => {\n    let randomIndex = Math.floor(Math.random() * quotes.length);\n    setRandomQuote(quotes[randomIndex]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container pt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"jumbotron text-center\",\n      id: \"quote-box\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Quotes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          id: \"text\",\n          children: [randomQuote ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: [\"\\\"\", randomQuote.text, \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              id: \"author\",\n              className: \"card-title\",\n              children: [\"-\", randomQuote.author || 'No author']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary\",\n                id: \"new-quote\",\n                onClick: getNewQuote,\n                children: \"Next Quote\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `https://twitter.com/intent/tweet?text= ${randomQuote.text} ${randomQuote.author}`,\n                target: \"_blank\",\n                rel: \"noreferrer\",\n                className: \"btn btn-outline-info \",\n                id: \"tweet-quote\",\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faTwitter\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"0r+3ZMjD3GXqo32wQSzDoAdaQeo=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","FontAwesomeIcon","faTwitter","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","quotes","setQuotes","randomQuote","setRandomQuote","fetchData","response","fetch","data","json","randomIndex","Math","floor","random","length","getNewQuote","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","text","author","onClick","href","target","rel","icon","_c","$RefreshReg$"],"sources":["C:/Users/Humi Yar/Desktop/react1/Build_random_quote_machine/random-quote-generator/src/App.js"],"sourcesContent":["import React from 'react';\nimport { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\n\nfunction App() {\n//set state for the fetch API json response (array of quotes) & set state to get a randomized quote\n  const [quotes, setQuotes] = useState([]);\n  const [randomQuote, setRandomQuote] = useState([]);\n//fetch data from API\n  useEffect(() => {\n    async function fetchData(){\n      const response = await fetch('https://type.fit/api/quotes');\n      const data = await response.json();\n//use data to set a random quote into state\n      setQuotes(data);\n      let randomIndex = Math.floor(Math.random() * data.length);\n      setRandomQuote(data[randomIndex]);\n\n    }\n//call fetch API function\n    fetchData();\n  }, [])\n\n//get new random quote & set it into state\n  const getNewQuote = () => {\n    let randomIndex = Math.floor(Math.random() * quotes.length);\n      setRandomQuote(quotes[randomIndex]);\n    }\n\n  return (\n      <div className=\"container pt-5\">\n        <div className='jumbotron text-center' id='quote-box'>\n          <div className='card'>\n            <div className='card-header'>Quotes</div>\n            <div className='card-body' id='text'>\n              {randomQuote ?\n                (<>\n                  <p className='card-text'>&quot;{randomQuote.text}&quot;</p>\n                  <h5 id='author' className='card-title'>-{randomQuote.author || 'No author'}</h5>\n                </>) : (<h2>Loading</h2>)\n                }\n              <div className='row'>\n                <div className='col'>\n                  <button className='btn btn-primary' id='new-quote' onClick={getNewQuote}>Next Quote</button>\n                </div>\n                <div className='col'>\n                  <a href={`https://twitter.com/intent/tweet?text= ${randomQuote.text} ${randomQuote.author}`}\n                  target='_blank'\n                  rel='noreferrer'\n                  className='btn btn-outline-info '\n                  id=\"tweet-quote\">\n                  <FontAwesomeIcon icon={faTwitter} />\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
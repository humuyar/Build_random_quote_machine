{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Humi Yar\\\\Desktop\\\\react1\\\\Build_random_quote_machine\\\\random-quote-generator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\nfunction App() {\n  _s();\n  const [quote, setQuote] = useState(\"I didn’t fail the test. I just found 100 ways to do it wrong.\");\n  const [author, setAuthor] = useState(\"Benjamin Franklin\");\n  const [randomNumber, setRandomNumber] = useState(0);\n  const [quotesArray, setquotesArray] = useState(null);\n  const fetchQuotes = async quoteDBUrl => {\n    const response = await fetch(quoteDBUrl);\n    const parsedJSON = response.json();\n    setquotesArray(parsedJSON);\n  };\n  useEffect(() => {\n    fetchQuotes = quoteDBUrl;\n  }, [quoteDBUrl]);\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger);\n    setQuote(quotesArray[randomInteger].quote);\n    setAuthor(quotesArray[randomInteger].author);\n  };\n\n  // const OURquotesArray = [{quote: \"Strive not to be a success, but rather to be of value.\", author: \"Albert Einstein\"},\n  //   {quote:\"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n  //   {quote:\"Nothing is impossible, the word itself says, “I’m possible!”\", author:\"Audrey Hepburn\"},\n  //   {quote: \"Dreaming, after all, is a form of planning.\",author:\"Gloria Steinem\"}\n  // ]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Random Number: \", randomNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => getRandomQuote(),\n        children: \"Generate randomenumber\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\\"\", quote, \"\\\"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"- \", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"w+8FsQQ3wbDCp3Lz4iprde/y9UM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","quoteDBUrl","App","_s","quote","setQuote","author","setAuthor","randomNumber","setRandomNumber","quotesArray","setquotesArray","fetchQuotes","response","fetch","parsedJSON","json","getRandomQuote","randomInteger","Math","floor","length","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Humi Yar/Desktop/react1/Build_random_quote_machine/random-quote-generator/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nconst quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\n\nfunction App() {\n  const [quote, setQuote] = useState (\"I didn’t fail the test. I just found 100 ways to do it wrong.\");\n  const [author, setAuthor] = useState (\"Benjamin Franklin\");\n  const [randomNumber, setRandomNumber] = useState(0);\n  const [quotesArray, setquotesArray] = useState(null);\n  const fetchQuotes = async (quoteDBUrl) => {\n    const response = await fetch(quoteDBUrl)\n    const parsedJSON = response.json()\n    setquotesArray(parsedJSON)\n  }\n  useEffect(() => {\n   fetchQuotes = (quoteDBUrl)\n  }, [quoteDBUrl])\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger)\n    setQuote(quotesArray[randomInteger].quote)\n    setAuthor(quotesArray[randomInteger].author)\n  }\n\n  // const OURquotesArray = [{quote: \"Strive not to be a success, but rather to be of value.\", author: \"Albert Einstein\"},\n  //   {quote:\"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n  //   {quote:\"Nothing is impossible, the word itself says, “I’m possible!”\", author:\"Audrey Hepburn\"},\n  //   {quote: \"Dreaming, after all, is a form of planning.\",author:\"Gloria Steinem\"}\n  // ]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Random Number: {randomNumber}</h1>\n        <button onClick={()=> getRandomQuote()}>Generate randomenumber</button>\n       <p>\n        \"{quote}\"\"\n       </p>\n       <p>\n        - {author}\n       </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,UAAU,GAAG,wIAAwI;AAG3J,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAE,+DAA+D,CAAC;EACpG,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAE,mBAAmB,CAAC;EAC1D,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMe,WAAW,GAAG,MAAOX,UAAU,IAAK;IACxC,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAACb,UAAU,CAAC;IACxC,MAAMc,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCL,cAAc,CAACI,UAAU,CAAC;EAC5B,CAAC;EACDjB,SAAS,CAAC,MAAM;IACfc,WAAW,GAAIX,UAAW;EAC3B,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMgB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACV,WAAW,CAACW,MAAM,GAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;IAClEb,eAAe,CAACS,aAAa,CAAC;IAC9Bb,QAAQ,CAACK,WAAW,CAACQ,aAAa,CAAC,CAACd,KAAK,CAAC;IAC1CG,SAAS,CAACG,WAAW,CAACQ,aAAa,CAAC,CAACZ,MAAM,CAAC;EAC9C,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA,oBACEN,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBxB,OAAA;MAAQuB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BxB,OAAA;QAAAwB,QAAA,GAAI,iBAAe,EAAChB,YAAY;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtC5B,OAAA;QAAQ6B,OAAO,EAAEA,CAAA,KAAKZ,cAAc,CAAC,CAAE;QAAAO,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxE5B,OAAA;QAAAwB,QAAA,GAAG,IACD,EAACpB,KAAK,EAAC,MACT;MAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ5B,OAAA;QAAAwB,QAAA,GAAG,IACA,EAAClB,MAAM;MAAA;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACzB,EAAA,CAzCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA2CZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}